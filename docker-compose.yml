services:
  postgres:
    container_name: crypto-postgres
    image: postgres:17
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - crypto-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 12

  config-server:
    container_name: crypto-config-server
    build:
      context: ./configServer
      dockerfile: Dockerfile
    image: cryptocollector/config-server:latest
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=native
    ports:
      - "8888:8888"
    networks:
      - crypto-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 12
    restart: always

  discovery-server:
    container_name: crypto-discovery-server
    build:
      context: ./discoveryServer
      dockerfile: Dockerfile
    image: cryptocollector/discovery-server:latest
    env_file:
      - .env
    ports:
      - "8761:8761"
    networks:
      - crypto-network
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 12
    restart: always

  api-gateway:
    container_name: crypto-api-gateway
    build:
      context: ./apiGateWay
      dockerfile: Dockerfile
    image: cryptocollector/api-gateway:latest
    env_file:
      - .env
    environment:
      - CONFIG_SERVER_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
    ports:
      - "8080:8080"
    networks:
      - crypto-network
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 12
    restart: always

  auth-service:
    container_name: crypto-auth-service
    build:
      context: ./microServices/auth-microServices
      dockerfile: Dockerfile
    image: cryptocollector/auth-service:latest
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - CONFIG_SERVER_URI=http://config-server:8888
      - SPRING_CLOUD_CONFIG_IMPORT_CHECK_ENABLED=false
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
    ports:
      - "8081:8080"
    networks:
      - crypto-network
    depends_on:
      postgres:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s
    restart: always

  redis:
    container_name: crypto-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - crypto-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: always

  crypto-collector-micro:
    container_name: crypto-collector-micro
    build:
      context: ./microServices/crypto-collector-micro
      dockerfile: Dockerfile
    image: cryptocollector/crypto-collector-micro:latest
    env_file:
      - .env
    environment:
      - CONFIG_SERVER_URI=http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/crypto_collector_db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-86400000}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    ports:
      - "8092:8080"
    networks:
      - crypto-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s
    restart: always

  frontend:
    container_name: crypto-frontend
    build:
      context: ../crytoCollectorFront
      dockerfile: Dockerfile
    image: cryptocollector/frontend:latest
    ports:
      - "4201:80"
    networks:
      - crypto-network
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pidof nginx || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  crypto-network:
    driver: bridge
    name: crypto-network